#!/usr/bin/env php
<?php
# conv2m
#
# read the test_map.md file,
# walks the subdirs pointet by that file gathers information stored there
# and outputs a single matlab / octave loadable file
#
define('LF', "\n");


class Converter
{
    const MAP_FILE = 'test_map.md';
    const MAP_ALL  = 'all';
    const MAP_ICW  = 'icarwash';
    const MAP_OLX  = 'olx';
    const OUT_FILE = 'out.m';
    const TESTS_PER_SERIES = 3;
    const VALUES_PER_TEST  = 7;
    const ADD_HEADER  = true;
    const DATE_FORMAT = 'Y-m-d H:i:s';

    protected $_mapFile = null;
    protected $_outFile = null;
    protected $_mapScope = null;
    protected $_map = [];
    protected $_rows = [];


    public function __construct($mapFile, $mapScope = self::MAP_ALL, $outFile = self::OUT_FILE)
    {
        if (!is_file($mapFile) || !is_readable($mapFile)) {
            throw new RuntimeException();
        }

        $this->_mapFile = $mapFile;
        $this->_mapScope = self::_expandScope(self::_isScopeValid($mapScope) ? $mapScope : self::MAP_ALL);
        $this->_outFile = $outFile;
    }


    public static function &createHeaderRow()
    {
        return [
            'human readable description',
            'path to capture directory',
            '– series 1 – appStats.DevicePowerPrediction',
            '– series 1 – appStats.RawStats.foreground.total_time_msec',
            '– series 1 – appStats.RawStats.network.mobile_active_time_msec',
            '– series 1 – appStats.RawStats.network.mobile_active_count',
            '– series 1 – appStats.RawStats.network.mobile_bytes_rx',
            '– series 1 – appStats.RawStats.network.mobile_bytes_tx',
            '– series 1 – appStats.RawStats.power_use_item.computed_power_mah',
            '– series 2 – appStats.DevicePowerPrediction',
            '– series 2 – appStats.RawStats.foreground.total_time_msec',
            '– series 2 – appStats.RawStats.network.mobile_active_time_msec',
            '– series 2 – appStats.RawStats.network.mobile_active_count',
            '– series 2 – appStats.RawStats.network.mobile_bytes_rx',
            '– series 2 – appStats.RawStats.network.mobile_bytes_tx',
            '– series 2 – appStats.RawStats.power_use_item.computed_power_mah',
            '– series 3 – appStats.DevicePowerPrediction',
            '– series 3 – appStats.RawStats.foreground.total_time_msec',
            '– series 3 – appStats.RawStats.network.mobile_active_time_msec',
            '– series 3 – appStats.RawStats.network.mobile_active_count',
            '– series 3 – appStats.RawStats.network.mobile_bytes_rx',
            '– series 3 – appStats.RawStats.network.mobile_bytes_tx',
            '– series 3 – appStats.RawStats.power_use_item.computed_power_mah',
        ];
    }

    public static function &createEmptyRow($desc, $path)
    {
        return [
            $desc,  # human readable description
            $path,  # path to capture directory
        # – series 1 –
            0,      # appStats.DevicePowerPrediction
            0,      # appStats.RawStats.foreground.total_time_msec
            0,      # appStats.RawStats.network.mobile_active_time_msec
            0,      # appStats.RawStats.network.mobile_active_count
            0,      # appStats.RawStats.network.mobile_bytes_rx
            0,      # appStats.RawStats.network.mobile_bytes_tx
            0,      # appStats.RawStats.power_use_item.computed_power_mah
        # – series 2 –
            0,      # appStats.DevicePowerPrediction
            0,      # appStats.RawStats.foreground.total_time_msec
            0,      # appStats.RawStats.network.mobile_active_time_msec
            0,      # appStats.RawStats.network.mobile_active_count
            0,      # appStats.RawStats.network.mobile_bytes_rx
            0,      # appStats.RawStats.network.mobile_bytes_tx
            0,      # appStats.RawStats.power_use_item.computed_power_mah
        # – series 3 –
            0,      # appStats.DevicePowerPrediction
            0,      # appStats.RawStats.foreground.total_time_msec
            0,      # appStats.RawStats.network.mobile_active_time_msec
            0,      # appStats.RawStats.network.mobile_active_count
            0,      # appStats.RawStats.network.mobile_bytes_rx
            0,      # appStats.RawStats.network.mobile_bytes_tx
            0,      # appStats.RawStats.power_use_item.computed_power_mah
        ];
    }

    public static function extractValues(array &$from, array &$to, $series = 1)
    {
        if (empty($from) || empty($to)) {
            return;
        }

        $offset = 2 + ($series - 1) * self::VALUES_PER_TEST;
        $to[$offset + 0] = $from['appStats']['DevicePowerPrediction'];
        $to[$offset + 1] = $from['appStats']['RawStats']['foreground']['total_time_msec'];
        $to[$offset + 2] = $from['appStats']['RawStats']['network']['mobile_active_time_msec'];
        $to[$offset + 3] = $from['appStats']['RawStats']['network']['mobile_active_count'];
        $to[$offset + 4] = $from['appStats']['RawStats']['network']['mobile_bytes_rx'];
        $to[$offset + 5] = $from['appStats']['RawStats']['network']['mobile_bytes_tx'];
        $to[$offset + 6] = $from['appStats']['RawStats']['power_use_item']['computed_power_mah'];
    }

    public static function describeValue($value)
    {
        $result = '# name: <cell-element>' . LF . '# type: ';

        if (is_numeric($value)) {
            $result .= 'scalar' . LF;
        } else {
            // everything else as string
            $result .= 'string' . LF . '# elements: 1' . LF . '# length: ' . strlen($value) . LF;
        }

        return ($result . $value . LF);
    }

    public final function run()
    {
        $this->_parseMapFile();
        $this->_readStatFiles();
        $this->_putContent();
    }

    public final function getMap()
    {
        return $this->_map;
    }

    public final function getRows()
    {
        return $this->_rows;
    }

    protected static function _isScopeValid($scope)
    {
        return in_array($scope, [self::MAP_ALL, self::MAP_ICW, self::MAP_OLX]);
    }

    protected static function _expandScope($scope)
    {
        return ($scope === self::MAP_ALL
            ? [ self::MAP_ICW, self::MAP_OLX ]
            : [ $scope ]
        );
    }

    protected function _isInScope($scope)
    {
        return in_array($scope, $this->_mapScope);
    }

    protected function _parseMapFile()
    {
        if (!empty($this->_map)) {
            return;
        }

        $mapFile = new SplFileObject($this->_mapFile);
        $mapScope = null;

        while (!$mapFile->eof()) {
            $line = trim($mapFile->fgets());
            $line = trim($line, LF);

            if (strpos($line, '## ') === 0) {
                // set scope
                $scope = strtolower(trim(str_replace('#', '', $line)));

                if (!$this->_isInScope($scope)) {
                    $mapScope = null;
                    continue;
                }

                $mapScope = $scope;
                $this->_map[$scope] = isset($this->_map[$scope]) ? $this->_map[$scope] : [];
            } elseif (strpos($line, '* ') === 0) {
                // add path;
                if (is_null($mapScope)) {
                    continue;
                }
                $parts = explode('→', str_replace('* ', '', $line));
                $this->_map[$mapScope][] = ['desc' => trim($parts[0]), 'path' => trim($parts[1])];
            }
        }
    }

    protected function _readStatFiles()
    {
        $this->_rows = [];

        foreach ($this->_map as $scope => $captures) {
            $this->_rows[$scope] = [];

            foreach ($captures as $capture) {
                $rowNum = count($this->_rows[$scope]);
                $this->_rows[$scope][$rowNum] = self::createEmptyRow($capture['desc'], $capture['path']);

                // read all files from given path and update them values
                if (is_dir($capture['path'])) {

                    for ($i = 1; $i <= self::TESTS_PER_SERIES; $i++) {

                        foreach (new DirectoryIterator($capture['path']) as $fileInfo) {

                            if (preg_match('/mt_' . $i . '_\d{1}.*\.json/', $fileInfo->getBasename())) {

                                // update values
                                self::extractValues(json_decode(file_get_contents($fileInfo->getPathName()), true),
                                        $this->_rows[$scope][$rowNum], $i);
                            }
                        }
                    }
                }
            }
        }
    }

    protected function _resetOutputFile()
    {
        file_put_contents($this->_outFile, '# Created by conv2m, ' . date(self::DATE_FORMAT) . LF);
    }

    protected function _putHeader(&$values, $name)
    {
        $rc = count($values);
        $cc = $rc > 0 ? count($values[0]) : 0;

        $header = '# name: ' . $name . LF . '# type: cell'. LF
                . '# rows: ' . $rc . LF
                . '# columns: ' . $cc. LF . LF;

        file_put_contents($this->_outFile, $header, FILE_APPEND);
    }

    protected function _putValues(&$values)
    {
        // values are put in sinle index order
        // so it means putting them column by column
        $result = '';
        $columnCount = (2 + self::TESTS_PER_SERIES * self::VALUES_PER_TEST);
        $rowCount = count($values);

        for ($column = 0; $column < $columnCount; $column += 1) {
            for ($row = 0; $row < $rowCount; $row += 1) {
                $result .= self::describeValue($values[$row][$column]);
            }
        }

        file_put_contents($this->_outFile, $result . LF . LF, FILE_APPEND);
    }

    protected function _putContent()
    {
        $this->_resetOutputFile();

        if (self::ADD_HEADER) {
            $header = [ self::createHeaderRow() ];
            $this->_putHeader($header, 'header');
            $this->_putValues($header);
        }

        foreach (array_keys($this->_rows) as $scope) {
            $this->_putHeader($this->_rows[$scope], $scope);
            $this->_putValues($this->_rows[$scope]);
        }
    }
}
////////////////////////////////////////////////////////////////////////
// run this thing !!!
////////////////////////////////////////////////////////////////////////
try {
    $converter = new Converter(Converter::MAP_FILE, Converter::MAP_ALL);
    $converter->run();
} catch (Exception $e) {
    file_put_contents('php://stderr', '#' . $e->getLine() . ': ' . $e->getMessage() . LF);
    exit(1);
}
