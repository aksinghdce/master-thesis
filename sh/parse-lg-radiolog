#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
import time
import re
import sys
import os.path


if len(sys.argv) < 2 or not os.path.isfile(sys.argv[1]):
    print('please supply a valid file path')
    exit(0)
else:
    file_name = sys.argv[1]

# an important line to us, can contain radio state transition
# or down- / upload packets information
re_line = re.compile(r'^.*(\d{2}:\d{2}:\d{2}\.\d{3}) V/LG-FASTDORMANCY.*\[([\w/]+)\] (.+)$')
# grabs current packets from rest group
re_rest = re.compile(r'^.*curr: TxPkts\((\d+)\), RxPkts\((\d+)\)$')

first_entry = True
# state history dictionary; key is timestamp string
state_hist  = {}


with open(file_name) as f:
    tx_delta = rx_delta = tx_total = rx_total = 0;

    for l in f:
        line_matches = re.match(re_line, l)

        if line_matches is None:
            # line does not match
            continue

        # time token
        t, ignore = line_matches.group(1).split('.')

        # state (IDLE 0, DCH/FACH 1)
        s = int(line_matches.group(2) != 'IDLE')
        # rest
        rest_matches = re.match(re_rest, line_matches.group(3))

        if rest_matches is not None:
            # tx, rx packet count
            tx_tmp   = int(rest_matches.group(1))
            rx_tmp   = int(rest_matches.group(2))

            if first_entry:
                first_entry = False
            else:
                tx_delta = tx_tmp - tx_total
                rx_delta = rx_tmp - rx_total
            tx_total = tx_tmp
            rx_total = rx_tmp
        else:
            tx_delta = rx_delta = 0;

        state_hist[t] = (s, tx_delta, rx_delta, tx_total, rx_total)

# print in octave save matrix format
# header
print('# Created by parse-lg-radiolog by parsing file: ' + file_name)
print('# name: RADIO_STATE')
print('# type: matrix')
print('# rows: ' + str(len(state_hist)))
print('# columns: 3')

# values
for key in sorted(state_hist.keys()):
    print(' ' + str(state_hist[key][0]) + ' ' \
            + str(state_hist[key][1]) + ' ' \
            + str(state_hist[key][2]))
